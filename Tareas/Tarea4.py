Entendiendo **kwargs
Veamos ahora el uso de **kwargs como par√°metro.

En Python, el par√°metro especial **kwargs en una funci√≥n se usa para pasar, de forma opcional, un n√∫mero variable de argumentos con nombre.

Las principales diferencias con respecto *args son:

Lo que realmente indica que el par√°metro es de este tipo es el s√≠mbolo ‚Äò**‚Äô, el nombre kwargs se usa por convenci√≥n.
El par√°metro recibe los argumentos como un diccionario.
Al tratarse de un diccionario, el orden de los par√°metros no importa. Los par√°metros se asocian en funci√≥n de las claves del diccionario.
¬øCu√°ndo es √∫til su uso?

Imaginemos que queremos implementar una funci√≥n filter que nos devuelva una consulta SQL de una tabla clientes que tiene los siguientes campos: nombre, apellidos, fecha_alta, ciudad, provincia, tipo y fecha_nacimiento.

Una primera aproximaci√≥n podr√≠a ser la siguiente:

def filter(ciudad, provincia, fecha_alta):
    return "SELECT * FROM clientes WHERE ciudad='{}' AND provincia='{}' AND fecha_alta={};".format(ciudad, provincia, fecha_alta)
No es una funci√≥n para sentirse muy contento üòñ Entre los diferentes problemas que pueden surgir tenemos:

Si queremos filtrar por un nuevo par√°metro, hay que cambiar la definici√≥n de la funci√≥n as√≠ como la implementaci√≥n.
Los par√°metros son todos obligatorios.
Si queremos consultar otro tipo de clientes manteniendo esta consulta, debemos crear una nueva funci√≥n.
La soluci√≥n a todos estos problemas est√° en hacer uso del par√°metro **kwargs. Veamos c√≥mo ser√≠a la nueva funci√≥n filter usando **kwargs:

def filter(**kwargs):
    query = "SELECT * FROM clientes"
    i = 0
    for key, value in kwargs.items():
        if i == 0:
            query += " WHERE "
        else:
            query += " AND "
        query += "{}='{}'".format(key, value)
        i += 1
    query += ";"
    return query
Con esta nueva implementaci√≥n hemos resuelto todos nuestros problemas como aut√©nticos pythonistas üòÑüêç

A continuaci√≥n podemos ver c√≥mo se comporta la nueva funci√≥n filter:

>>>filter()
SELECT * FROM clientes;
>>>filter(ciudad="Madrid")
SELECT * FROM clientes WHERE ciudad='Madrid';
>>>filter(ciudad="Madrid", fecha_alta="25-10-2018")
SELECT * FROM clientes WHERE ciudad='Madrid' AND fecha_alta='25-10-2018';
Hasta aqu√≠ hemos visto qu√© significan los par√°metros *args y **kwargs en una funci√≥n en Python y dos ejemplos de cu√°ndo y c√≥mo usarlos. Otros ejemplos de uso comunes son los decoradores (de los cu√°les te hablar√© en otro post) y el m√©todo __init__ en la herencia. Te mostrar√© este √∫ltimo ya que hace un uso combinado de ambos.

Supongamos que tenemos la siguiente clase Punto:

class Punto:
    def __init__(self, x=0, y=0):
        self.x = x
        self.y = y
    def __repr__(self):
        return "x: {}, y: {}".format(self.x, self.y)
Y ahora queremos a√±adir una clase Circulo que herede de Punto. Para conocer todos los detalles del c√≠rculo, nos hace falta conocer su radio, por lo que debe ser incluido en el m√©todo __init__. Sin embargo, la definici√≥n ser√° un poco diferente a la de la clase Punto:

class Circulo(Punto):
    def __init__(self, radio, *args, **kwargs):
        self.radio = radio
        super().__init__(*args, **kwargs)
    def __repr__(self):
        return "x: {}, y: {}, radio: {}".format(self.x, self.y, self.radio)
Con esta implementaci√≥n, si la definici√≥n del m√©todo __init__ en la clase Punto cambia, no tendremos que modificar la implementaci√≥n de la clase Circulo.

Para crear un objeto de la clase Circulo basta con escribir:

>>>Circulo(10, 1, 1)
x: 1, y: 1, radio: 10
En otros post veremos m√°s sobre herencia y orientaci√≥n a objetos en el lenguaje Python. Con este ejemplo simplemente quer√≠a mostrar otro uso de los par√°metros *args y **kwargs.

El orden importa
Quiero mencionar que el orden de los par√°metros *args y **kwargs en la definici√≥n de una funci√≥n importa, y mucho. Ambos pueden aparecer de forma conjunta o individual, pero siempre al final y de la siguiente manera:

def ejemplo(arg1, arg2, *args, **kwargs)
*args y **kwargs como argumentos en la llamada a una funci√≥n
*args y **kwargs tambi√©n pueden usarse como argumentos al invocar a una funci√≥n y su comportamiento es distinto al que te he ense√±ado anteriormente.

Imaginemos la siguiente funci√≥n resultado:

def resultado(x, y, op):
    if op == '+':
        return x + y
    elif op == '-':
        return x - y
Esta funci√≥n recibe tres par√°metros: x, y y op y puede ser invocada de distintas formas. La primera de ellas es la que ya supones:

>>>resultado(1, 2, '+')
3
Pero tambi√©n podemos invocar a la funci√≥n resultado con un √∫nico par√°metro de tipo iterable, como una tupla o una lista, del siguiente modo (*args):

>>>a = (1, 2, '+')
>>>resultado(*a)
3
O incluso as√≠:

>>>a = (2, '-')
>>>resultado(3, *a)
1
Tambi√©n podemos pasar como argumento un diccionario usando como claves los nombres de los par√°metros (**kwargs):

>>>a = {"op": "+", "x": 2, "y": 5}
>>>resultado(**a)
7
Conclusi√≥n
Bueno, con esto llega a su fin el tutorial sobre qu√© significan y c√≥mo y cu√°ndo usar los par√°metros *args y **kwargs en Python. Repasemos las cuestiones clave:

Utiliza *args para pasar de forma opcional a una funci√≥n un n√∫mero variable de argumentos posicionales.
El par√°metro *args recibe los argumentos como una tupla.
Emplea **kwargs para pasar de forma opcional a una funci√≥n un n√∫mero variable de argumentos con nombre.
El par√°metro **kwargs recibe los argumentos como un diccionario.
Por √∫ltimo, quiero comentarte que un gran poder conlleva una gran responsabilidad. Utilizar *args y **kwargs puede ahorrarte muchos mareos de cabeza y convertirte en un programador top pero tambi√©n puede llevarte a resultados inesperados si no llevas cuidado con su uso.


Sacado de :
https://j2logo.com/args-y-kwargs-en-python/